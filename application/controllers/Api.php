<?php
/* 
 * Generated by CRUDigniter v3.2 
 * www.crudigniter.com
 */

class Api extends CI_Controller
{
    function __construct()
    {
        parent::__construct();
        $this->load->model('Api_model');
    }

    /*
     * Listing of api
     */
    function index()
    {
        $data['api'] = $this->Api_model->get_all_api();

        $data['_view'] = 'admin/api/index';
        $this->load->view('admin/layouts/main', $data);
    }

    function getAPI()
    {
        $par = [
            'select' => $this->input->post('select'),
            'view_name' => $this->input->post('view_name'),
            'where' => $this->input->post('where'),
            'order_by' => $this->input->post('order_by'),
            'limit' => $this->input->post('limit'),
        ];
        $isi = getISI($par);
        $data = $isi['data'];
        $html = '';
        $fie = [];
        foreach ($data[0] as $field => $val) {
            $html .= '<div class="form-group row">
						<div class="col-md-8">
							<label for="' . $field . '" class="control-label"><span class="text-danger">*</span>' . $field . '</label>
							<input type="number" name="' . $field . '" class="form-control" id="' . $field . '" />
						</div>
                    </div>';
            array_push($fie, $field);
        }
        $html .= '
        <div class="form-group row">
                    <div class="col-md-8">
                        <label class="control-label"><span class="text-danger">*</span>Key For Update</label>
                        <select name="keyForUpdate" class="form-control">
                        ';
        foreach ($fie as $f) {
            $html .= '<option value="' . $f . '">' . $f . '</option>';
        }
        $html .= '
                        </select>
						<input type="hidden" name="field" class="form-control" value="' . implode('|', $fie) . '" />
                    </div>
                </div>
        ';
        echo $html;
    }

    function addData()
    {

        $par = [
            'key' => 'idku',
            'keyForUpdate' => $this->input->post('keyForUpdate'),
            'index' => [],
            'field' => [
                'idku' => [
                    'type' => 'INT',
                    'constraint' => 11,
                    'unsigned' => true,
                    'auto_increment' => true
                ]
            ],
        ];
        $ex = explode('|', $this->input->post('field'));
        foreach ($ex as $e) {
            $par['field'][$e] = [
                'type' => 'VARCHAR',
                'null' => true,
                'constraint' => $this->input->post($e)
            ];
        }
        $para = [
            'name' =>  $this->input->post('name'),
            'select' => $this->input->post('select'),
            'view_name' => $this->input->post('view_name'),
            'where' => $this->input->post('where'),
            'order_by' => $this->input->post('order_by'),
            'limit' => $this->input->post('limit'),
            'jsonConfig' => json_encode($par)
        ];
        $isi = $this->db->insert('api',$para);
        if($isi){
            echo json_encode('sukses');
        }else{
            echo json_encode('gagal');
        }
    }
    function add()
    {
        $this->load->library('form_validation');

        $this->form_validation->set_rules('name', 'Name', 'required');
        $this->form_validation->set_rules('view_name', 'View Name', 'required');
        $this->form_validation->set_rules('select', 'Select', 'required');
        $this->form_validation->set_rules('limit', 'Limit', 'required');
        $this->form_validation->set_rules('jsonConfig', 'JsonConfig', 'required');

        if ($this->form_validation->run()) {
            $params = array(
                'name' => $this->input->post('name'),
                'view_name' => $this->input->post('view_name'),
                'select' => $this->input->post('select'),
                'where' => $this->input->post('where'),
                'limit' => $this->input->post('limit'),
                'order_by' => $this->input->post('order_by'),
                'jsonConfig' => $this->input->post('jsonConfig'),
            );

            $api_id = $this->Api_model->add_api($params);
            redirect('api/index');
        } else {
            $data['_view'] = 'admin/api/add';
            $this->load->view('admin/layouts/main', $data);
        }
    }

    /*
     * Editing a api
     */
    function edit($id)
    {
        // check if the api exists before trying to edit it
        $data['api'] = $this->Api_model->get_api($id);

        if (isset($data['api']['id'])) {
            $this->load->library('form_validation');

            $this->form_validation->set_rules('name', 'Name', 'required');
            $this->form_validation->set_rules('view_name', 'View Name', 'required');
            $this->form_validation->set_rules('select', 'Select', 'required');
            $this->form_validation->set_rules('limit', 'Limit', 'required');
            $this->form_validation->set_rules('jsonConfig', 'JsonConfig', 'required');

            if ($this->form_validation->run()) {
                $params = array(
                    'name' => $this->input->post('name'),
                    'view_name' => $this->input->post('view_name'),
                    'select' => $this->input->post('select'),
                    'where' => $this->input->post('where'),
                    'limit' => $this->input->post('limit'),
                    'order_by' => $this->input->post('order_by'),
                    'jsonConfig' => $this->input->post('jsonConfig'),
                );

                $this->Api_model->update_api($id, $params);
                redirect('api/index');
            } else {
                $data['_view'] = 'admin/api/edit';
                $this->load->view('admin/layouts/main', $data);
            }
        } else
            show_error('The api you are trying to edit does not exist.');
    }

    /*
     * Deleting api
     */
    function remove($id)
    {
        $api = $this->Api_model->get_api($id);

        // check if the api exists before trying to delete it
        if (isset($api['id'])) {
            $this->Api_model->delete_api($id);
            redirect('api/index');
        } else
            show_error('The api you are trying to delete does not exist.');
    }
}
